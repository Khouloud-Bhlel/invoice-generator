"use client";
import { __awaiter } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { Plus, Trash2, FileDown, RefreshCw, Calendar, DollarSign, Hash, FileText, User, ClipboardList, MapPin, Mail, Building, } from "lucide-react";
import { Button } from "./ui/button";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "./ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, } from "./ui/form";
import { Input } from "./ui/input";
import { Textarea } from "./ui/textarea";
import { Badge } from "./ui/badge";
import { Separator } from "./ui/separator";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from "./ui/table";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger, } from "./ui/tooltip";
import { InvoiceFormSchema } from "../lib/types";
import { generatePDF } from "../lib/pdf-generator";
export function InvoiceGenerator({ className, title = "Invoice Generator", description = "Create professional invoices for your clients with our easy-to-use generator", defaultValues, onPDFGenerated, onError, }) {
    const [isGenerating, setIsGenerating] = useState(false);
    const [error, setError] = useState(null);
    const form = useForm({
        resolver: zodResolver(InvoiceFormSchema),
        defaultValues: Object.assign({ clientName: "", clientAddress: "", clientEmail: "", fromName: "", fromAddress: "", fromEmail: "", invoiceNumber: `INV-${format(new Date(), "yyyyMMdd")}-001`, date: new Date(), items: [{ description: "", quantity: 1, price: 0 }] }, defaultValues),
    });
    const { fields, append, remove } = useFieldArray({
        control: form.control,
        name: "items",
    });
    const onSubmit = (data) => __awaiter(this, void 0, void 0, function* () {
        try {
            setIsGenerating(true);
            setError(null);
            yield generatePDF(data);
            onPDFGenerated === null || onPDFGenerated === void 0 ? void 0 : onPDFGenerated(data);
        }
        catch (err) {
            const error = err instanceof Error ? err : new Error("Failed to generate PDF. Please try again.");
            console.error("Failed to generate PDF:", error);
            setError(error.message);
            onError === null || onError === void 0 ? void 0 : onError(error);
        }
        finally {
            setIsGenerating(false);
        }
    });
    const total = form.watch("items").reduce((sum, item) => sum + (item.quantity || 0) * (item.price || 0), 0);
    return (_jsxs("div", { className: `container mx-auto py-8 px-4 ${className || ""}`, children: [_jsxs("div", { className: "flex flex-col items-center justify-center mb-8", children: [_jsx("h1", { className: "text-3xl font-bold mb-2", children: title }), _jsx("p", { className: "text-muted-foreground text-center max-w-md", children: description })] }), error && (_jsx("div", { className: "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6", children: error })), _jsxs("div", { className: "grid gap-8 lg:grid-cols-5", children: [_jsxs(Card, { className: "lg:col-span-3 shadow-lg", children: [_jsxs(CardHeader, { className: "bg-primary/5 rounded-t-lg", children: [_jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(FileText, { className: "h-5 w-5" }), "Invoice Details"] }), _jsx(CardDescription, { children: "Fill in the details to generate your invoice" })] }), _jsx(CardContent, { className: "pt-6", children: _jsx(Form, Object.assign({}, form, { children: _jsxs("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6", children: [_jsxs("div", { className: "grid gap-6 md:grid-cols-2", children: [_jsx(FormField, { control: form.control, name: "invoiceNumber", render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(Hash, { className: "h-4 w-4" }), "Invoice Number"] }), _jsx(FormControl, { children: _jsx(Input, Object.assign({}, field, { className: "border-primary/20 focus:border-primary" })) }), _jsx(FormMessage, {})] })) }), _jsx(FormField, { control: form.control, name: "date", render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "h-4 w-4" }), "Invoice Date"] }), _jsx(FormControl, { children: _jsx(Input, { type: "date", value: format(field.value, "yyyy-MM-dd"), onChange: (e) => field.onChange(new Date(e.target.value)), className: "border-primary/20 focus:border-primary" }) }), _jsx(FormMessage, {})] })) })] }), _jsx(Separator, {}), _jsxs("div", { className: "grid gap-6 md:grid-cols-2", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("h3", { className: "text-lg font-semibold flex items-center gap-2 text-primary", children: [_jsx(Building, { className: "h-5 w-5" }), "Billed To"] }), _jsx(FormField, { control: form.control, name: "clientName", render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(User, { className: "h-4 w-4" }), "Client Name"] }), _jsx(FormControl, { children: _jsx(Input, Object.assign({}, field, { placeholder: "Enter client name", className: "border-primary/20 focus:border-primary" })) }), _jsx(FormMessage, {})] })) }), _jsx(FormField, { control: form.control, name: "clientAddress", render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(MapPin, { className: "h-4 w-4" }), "Address"] }), _jsx(FormControl, { children: _jsx(Textarea, Object.assign({}, field, { placeholder: "123 Anywhere St., Any City", className: "border-primary/20 focus:border-primary min-h-[80px]", rows: 3 })) }), _jsx(FormMessage, {})] })) }), _jsx(FormField, { control: form.control, name: "clientEmail", render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(Mail, { className: "h-4 w-4" }), "Email"] }), _jsx(FormControl, { children: _jsx(Input, Object.assign({}, field, { type: "email", placeholder: "client@email.com", className: "border-primary/20 focus:border-primary" })) }), _jsx(FormMessage, {})] })) })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("h3", { className: "text-lg font-semibold flex items-center gap-2 text-primary", children: [_jsx(User, { className: "h-5 w-5" }), "From"] }), _jsx(FormField, { control: form.control, name: "fromName", render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(User, { className: "h-4 w-4" }), "Your Name"] }), _jsx(FormControl, { children: _jsx(Input, Object.assign({}, field, { placeholder: "Enter your name", className: "border-primary/20 focus:border-primary" })) }), _jsx(FormMessage, {})] })) }), _jsx(FormField, { control: form.control, name: "fromAddress", render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(MapPin, { className: "h-4 w-4" }), "Your Address"] }), _jsx(FormControl, { children: _jsx(Textarea, Object.assign({}, field, { placeholder: "123 Anywhere St., Any City", className: "border-primary/20 focus:border-primary min-h-[80px]", rows: 3 })) }), _jsx(FormMessage, {})] })) }), _jsx(FormField, { control: form.control, name: "fromEmail", render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(Mail, { className: "h-4 w-4" }), "Your Email"] }), _jsx(FormControl, { children: _jsx(Input, Object.assign({}, field, { type: "email", placeholder: "your@email.com", className: "border-primary/20 focus:border-primary" })) }), _jsx(FormMessage, {})] })) })] })] }), _jsx(Separator, {}), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("h3", { className: "text-lg font-semibold flex items-center gap-2", children: [_jsx(ClipboardList, { className: "h-5 w-5" }), "Invoice Items"] }), _jsx(TooltipProvider, { children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsxs(Button, { type: "button", variant: "outline", size: "sm", onClick: () => append({ description: "", quantity: 1, price: 0 }), className: "border-primary/30 hover:bg-primary/10 hover:text-primary", children: [_jsx(Plus, { className: "mr-2 h-4 w-4" }), "Add Item"] }) }), _jsx(TooltipContent, { children: _jsx("p", { children: "Add a new line item to your invoice" }) })] }) })] }), fields.map((field, index) => (_jsxs(Card, { className: "overflow-hidden border-primary/10", children: [_jsx(CardHeader, { className: "bg-slate-50 dark:bg-slate-900 p-4 pb-2", children: _jsxs(CardTitle, { className: "text-base flex justify-between items-center", children: [_jsxs("span", { children: ["Item #", index + 1] }), fields.length > 1 && (_jsx(TooltipProvider, { children: _jsxs(Tooltip, { children: [_jsx(TooltipTrigger, { asChild: true, children: _jsx(Button, { type: "button", variant: "ghost", size: "sm", onClick: () => remove(index), className: "h-8 text-destructive hover:text-destructive hover:bg-destructive/10", children: _jsx(Trash2, { className: "h-4 w-4" }) }) }), _jsx(TooltipContent, { children: _jsx("p", { children: "Remove this item" }) })] }) }))] }) }), _jsx(CardContent, { className: "p-4 pt-2", children: _jsxs("div", { className: "grid gap-4", children: [_jsx(FormField, { control: form.control, name: `items.${index}.description`, render: ({ field }) => (_jsxs(FormItem, { children: [_jsx(FormLabel, { children: "Description" }), _jsx(FormControl, { children: _jsx(Input, Object.assign({}, field, { placeholder: "Item description", className: "border-primary/20 focus:border-primary" })) }), _jsx(FormMessage, {})] })) }), _jsxs("div", { className: "grid gap-4 sm:grid-cols-2", children: [_jsx(FormField, { control: form.control, name: `items.${index}.quantity`, render: ({ field }) => (_jsxs(FormItem, { children: [_jsx(FormLabel, { children: "Quantity" }), _jsx(FormControl, { children: _jsx(Input, Object.assign({ type: "number", min: "1" }, field, { onChange: (e) => field.onChange(Number(e.target.value)), className: "border-primary/20 focus:border-primary" })) }), _jsx(FormMessage, {})] })) }), _jsx(FormField, { control: form.control, name: `items.${index}.price`, render: ({ field }) => (_jsxs(FormItem, { children: [_jsxs(FormLabel, { className: "flex items-center gap-2", children: [_jsx(DollarSign, { className: "h-4 w-4" }), "Price"] }), _jsx(FormControl, { children: _jsx(Input, Object.assign({ type: "number", step: "0.01", min: "0" }, field, { onChange: (e) => field.onChange(Number(e.target.value)), className: "border-primary/20 focus:border-primary" })) }), _jsx(FormMessage, {})] })) })] })] }) })] }, field.id)))] }), _jsxs("div", { className: "flex flex-col gap-4 sm:flex-row sm:justify-between", children: [_jsxs(Button, { type: "button", variant: "outline", onClick: () => form.reset(), className: "border-primary/30 hover:bg-primary/10 hover:text-primary", children: [_jsx(RefreshCw, { className: "mr-2 h-4 w-4" }), "Reset Form"] }), _jsxs(Button, { type: "submit", disabled: isGenerating, className: "bg-primary hover:bg-primary/90", children: [_jsx(FileDown, { className: "mr-2 h-4 w-4" }), isGenerating ? "Generating PDF..." : "Generate PDF"] })] })] }) })) })] }), _jsxs(Card, { className: "lg:col-span-2 shadow-lg", children: [_jsxs(CardHeader, { className: "bg-primary text-primary-foreground rounded-t-lg", children: [_jsxs(CardTitle, { className: "flex items-center justify-between", children: ["Invoice Preview", _jsx(Badge, { variant: "outline", className: "bg-primary-foreground/10 text-primary-foreground border-primary-foreground/20", children: format(form.watch("date"), "MMMM yyyy") })] }), _jsx(CardDescription, { className: "text-primary-foreground/80", children: "Live preview of your invoice" })] }), _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid gap-4 sm:grid-cols-2", children: [_jsxs("div", { className: "border-l-4 border-primary pl-4 py-1", children: [_jsx("h3", { className: "text-sm font-medium text-muted-foreground", children: "Billed to:" }), _jsx("p", { className: "text-lg font-semibold", children: form.watch("clientName") || "Client Name" }), _jsx("p", { className: "text-sm text-muted-foreground", children: form.watch("clientAddress") || "123 Anywhere St., Any City" }), _jsx("p", { className: "text-sm text-muted-foreground", children: form.watch("clientEmail") || "client@email.com" })] }), _jsxs("div", { className: "border-l-4 border-secondary pl-4 py-1", children: [_jsx("h3", { className: "text-sm font-medium text-muted-foreground", children: "From:" }), _jsx("p", { className: "text-lg font-semibold", children: form.watch("fromName") || "Your Name" }), _jsx("p", { className: "text-sm text-muted-foreground", children: form.watch("fromAddress") || "123 Anywhere St., Any City" }), _jsx("p", { className: "text-sm text-muted-foreground", children: form.watch("fromEmail") || "your@email.com" })] })] }), _jsxs("div", { className: "grid gap-4 sm:grid-cols-2", children: [_jsxs("div", { className: "bg-slate-50 dark:bg-slate-900 p-3 rounded-md", children: [_jsxs("h3", { className: "text-sm font-medium text-muted-foreground flex items-center gap-1", children: [_jsx(Hash, { className: "h-3 w-3" }), " Invoice Number"] }), _jsx("p", { className: "font-mono", children: form.watch("invoiceNumber") })] }), _jsxs("div", { className: "bg-slate-50 dark:bg-slate-900 p-3 rounded-md", children: [_jsxs("h3", { className: "text-sm font-medium text-muted-foreground flex items-center gap-1", children: [_jsx(Calendar, { className: "h-3 w-3" }), " Date"] }), _jsx("p", { children: format(form.watch("date"), "MMMM dd, yyyy") })] })] }), _jsxs("div", { children: [_jsxs("h3", { className: "mb-2 text-sm font-medium text-muted-foreground flex items-center gap-1", children: [_jsx(ClipboardList, { className: "h-3 w-3" }), " Items"] }), _jsxs(Table, { children: [_jsx(TableHeader, { className: "bg-slate-50 dark:bg-slate-900", children: _jsxs(TableRow, { children: [_jsx(TableHead, { children: "Description" }), _jsx(TableHead, { className: "text-right", children: "Qty" }), _jsx(TableHead, { className: "text-right", children: "Price" }), _jsx(TableHead, { className: "text-right", children: "Total" })] }) }), _jsxs(TableBody, { children: [form.watch("items").map((item, index) => (_jsxs(TableRow, { children: [_jsx(TableCell, { className: "font-medium", children: item.description || "Item description" }), _jsx(TableCell, { className: "text-right", children: item.quantity }), _jsxs(TableCell, { className: "text-right", children: ["$", item.price.toFixed(2)] }), _jsxs(TableCell, { className: "text-right", children: ["$", (item.quantity * item.price).toFixed(2)] })] }, index))), form.watch("items").length < 3 && (_jsx(TableRow, { children: _jsx(TableCell, { colSpan: 4, className: "text-center text-muted-foreground italic", children: form.watch("items").length === 0
                                                                            ? "No items added yet"
                                                                            : "Add more items to your invoice" }) }))] })] })] }), _jsx("div", { className: "flex justify-end", children: _jsxs("div", { className: "w-48 space-y-2", children: [_jsx(Separator, {}), _jsxs("div", { className: "flex justify-between py-1", children: [_jsx("span", { className: "font-medium", children: "Total:" }), _jsxs("span", { className: "font-bold text-primary", children: ["$", total.toFixed(2)] })] })] }) })] }) }), _jsxs(CardFooter, { className: "bg-slate-50 dark:bg-slate-900 flex justify-between items-center text-sm text-muted-foreground", children: [_jsx("p", { children: "Thank you for your business" }), _jsx("p", { children: format(new Date(), "yyyy") })] })] })] })] }));
}
//# sourceMappingURL=InvoiceGenerator.js.map